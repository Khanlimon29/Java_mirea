Задание №1
Создайте класс Triangle для представления треугольников, который
порождается от класса GeometricObject. Напишите клиент этих классов —
программу, которая запрашивает у пользователя ввести три стороны
треугольника, цвет и логическое значение для указания закрашен ли
треугольник. Программа должна создавать объект типа Triangle с
указанными сторонами и присваивать значения свойствам цвет color и
заливка isFilled с помощью этих входных данных. Программа должна
отображать площадь area, периметр perimeter, цвет, а также true или false для
указания, закрашен треугольник или нет.
Класс Triangle должен содержать:
Три поля данных типа double с именами side1, side2 и side3 и с заданными по
умолчанию значениями, равными 1.0, для обозначения трех сторон
треугольника.
Безаргументный конструктор, который создает треугольник с заданными по
умолчанию значениями.
Конструктор, который создает треугольник с side1, side2 и side3.
Getter-методы для всех трех полей данных.
Метод с именем getArea(), который возвращает площадь этого треугольника.
Метод с именем getPerimeter(), который возвращает периметр этого
треугольника.
Метод с именем toString(), который возвращает строковое описание
треугольника.
Метод toString() должен быть реализован следующим образом:
return "Треугольник: сторона1 = " + side1 + " сторона2 = " + side2 + " сторона3 = " + side3;
Задание №2
В треугольнике сумма длин любых двух сторон больше длины третьей
стороны. Класс Triangle должен удовлетворять этому правилу. Создайте
класс IllegalTriangleException и измените конструктор класса Triangle, чтобы
выбросить объект типа IllegalTriangleException, если треугольник создан со
сторонами, нарушающими это правило, следующим образом:
/** Создает треугольник с указанными сторонами */
public Triangle(double side1, double side2, double side3)
 throws IllegalTriangleException {
 // Тут надо написать реализацию исключения
}
Задание №3
Спроектируйте новый класс Triangle, который наследуется от абстрактного
класса GeometricObject.
1. Напишите тестовую программу, которая запрашивает у
пользователя ввод трёх сторон треугольника, цвета и логического значения
для указания заливки.
2. Программа должна создать объект типа Triangle с этими
сторонами и задать свойства color и filled, используя введенные
пользователем данные.
3. Программа должна отображать площадь, периметр, цвет и
значение true или false для указания заливки.
4. Реализуйте в классе GeometricObject интерфейс Comparable и
определите статический метод max() в классе GeometricObject для поиска
наибольшего из двух объектов типа GeometricObject.
5. Проверьте тестовой программой работу метода max() для поиска
наибольшего из двух кругов и наибольшего из двух прямоугольников.
6. Вернитесь к классу с именем ComparableCircle, который
наследуется от Circle и реализует Comparable. Напишите тестовую
программу, чтобы найти наибольший из двух экземпляров класса
ComparableCircle и наибольший между кругом и прямоугольником,
используя метод compareTo().
Задание №4
1. Создайте интерфейс с именем Colorable с помощью метода
howToColor() типа void. Каждый класс раскрашиваемого объекта должен
реализовывать интерфейс Colorable.
2. Спроектируйте класс Square, который наследуется от
GeometricObject и реализует Colorable. Реализуйте метод howToColor() для
отображения сообщения: Раскрасьте все четыре стороны.
3. Класс Square содержит поле данных side с getter- и setterметодами, а также конструктор для создания Square с указанной стороной. У
класса Square есть скрытое поле данных типа double с именем side и getter- и
setter-методами. У него есть безаргументный конструктор, который создает
объект типа Square со стороной, равной 0, и еще один конструктор, который
создает объект типа Square с указанной стороной.
4. Напишите тестовую программу, которая создает массив из пяти
объектов типа GeometricObjects. Для каждого объекта в массиве отобразите
его площадь и вызовите метод howToColor(), если его можно раскрасить.